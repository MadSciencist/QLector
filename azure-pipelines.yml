trigger:
- master
- develop

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'

steps:

    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'qlector-azurepipelines'
        organization: 'madsciencist-github'
        scannerMode: 'MSBuild'
        projectKey: 'MadSciencist_QLector'
        projectName: 'qlector'
        extraProperties: 'sonar.cs.opencover.reportsPaths=$(build.sourcesdirectory)/target/reports/coverage/coverage.opencover.xml'

    - task: UseDotNet@2 
      displayName: ".NET Core 3.1.x"
      inputs:
        version: '3.1.x'
        packageType: sdk

    - script: dotnet build --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Test"
      inputs:
        command: test
        projects: 'tests/**/*.csproj'
        arguments: '--configuration $(BuildConfiguration) --no-build /p:CollectCoverage=true /p:IncludeTestAssembly=true /p:CoverletOutputFormat=opencover%2ccobertura /p:CoverletOutput=../../target/reports/coverage/'
    
    - task: UseDotNet@2 
      displayName: ".NET Core 2.1 (for Sonar-Cloud)"
      inputs:
        version: '2.0.x'
        packageType: runtime
    - task: SonarCloudAnalyze@1

    - task: SonarCloudPublish@1
      inputs:
        pollingTimeoutSec: '300'

    - task: UseDotNet@2 
      displayName: ".NET Core 3.1.x"
      inputs:
        version: '3.1.x'
        packageType: sdk
        
    - task: Palmmedia.reportgenerator.reportgenerator-build-release-task.reportgenerator@4
      displayName: ReportGenerator
      inputs:
        reports: 'target/reports/coverage/coverage.opencover.xml'
        targetdir: 'target/reports/coverage'
        reporttypes: 'HtmlInline_AzurePipelines;Cobertura;Badges'
        assemblyfilters: '-xunit*'
        verbosity: 'Verbose'

    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage results'
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(build.sourcesdirectory)/target/reports/coverage/coverage.cobertura.xml'
        reportDirectory: '$(build.sourcesdirectory)/target/reports/coverage'

    - task: DotNetCoreCLI@2
      displayName: "Publish"
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '-r linux-x64 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      displayName: "Upload Artifacts"
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'app-linux-x64' 